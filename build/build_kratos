#!/bin/bash

set -e

print_help() {
    echo "Build and install KratosMultiphysics."
    echo "Usage: build [OPTIONS]"
    echo "[-h|C|b|t:|c:|o:|a:|]"
    echo "h     print this help and exit"
    echo "C     clean build and install directories, then exit"
    echo "b     include the branch name in the build directory (accelerate compilation when switching back and forth between branches)"
    echo "t     build type [FullDebug, Debug, Release, RelWithDebInfo] (Default: FullDebug)"
    echo "c     compiler [gcc, clang] (Default: gcc)"
    echo "o     additional compile options (Default: no additional compile options)"
    echo "a     path to a file containing applications' names to be compiled"
}

get_site_packages_dir() {
    echo $(python3 -c 'import sysconfig; print(sysconfig.get_paths()["purelib"])')
}

# Set default arguments
script_dir="$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"

build_type="FullDebug"
compiler_family="gcc"
compile_opts=""
clean=0
include_branch_name=0
app_file_path="${script_dir}/kratos_default_apps.txt"
app_names=""

# Set variables
source_dir="$(dirname "${script_dir}")"
build_dir="$(dirname "${script_dir}")/build"
kratos_install_dir=$(get_site_packages_dir)
kratos_source_dir="${source_dir}/external/kratos"
local_app_dir="${source_dir}/applications"

add_apps_from_list () {
    # Collect and set applications to compile
    if [ -f "$1" ]; then
        app_names="${app_names} $(tr '\n' ' ' < $1)"
    else
        echo "App list file not found: $1"
        exit 1
    fi
}

# Parse CL arguments
while getopts "hCbt:c:o:a:" arg; do
    case $arg in
        h)  # Print help and exit without doing anything.
            print_help
            exit 0
            ;;
        C)  # Set clean flag
            clean=1
            ;;
        b)  # Include branch name in build directory
            include_branch_name=1
            ;;
        t)  # Select build type
            build_type="${OPTARG}"
            (("${build_type}" == "FullDebug" || "${build_type}" == "Debug" || "${build_type}" == "RelWithDebInfo" || "${build_type}" == "Release")) || (print_help && echo "Invalid build type: ${build_type}" && exit 1)
            ;;
        c)  # Select compilers
            compiler_family="${OPTARG}"
            ;;
        o)  # Set compiler options
            compile_opts="${OPTARG}"
            ;;
        a)  # Set path to a file containing a list of applications' names to be compiled
            add_apps_from_list "${OPTARG}"
            ;;
        \?) # Invalid argument
            echo "Unsupported argument: ${OPTARG}"
            exit 1
    esac
done

if [ $include_branch_name -ne 0 ]; then
    current_dir=$(pwd)
    cd "${kratos_source_dir}"
    branch_name=$(git rev-parse --abbrev-ref HEAD)
    cd "${current_dir}"
    kratos_build_dir="${build_dir}/kratos/${branch_name}/${compiler_family}/${build_type}"
else
    kratos_build_dir="${build_dir}/kratos/${compiler_family}/${build_type}"
fi

if [ $clean -eq 1 ]; then
    clean="--clean"
else
    clean=
fi

if [ -z "$compile_opts" ]; then
    compile_opts=""
else
    compile_opts="--compile-opts=${compile_opts}"
fi

# Check MPI
mpi_flag=""
if command -v mpirun &> /dev/null; then
    mpi_flag="--enable-mpi"
fi

python3 "${source_dir}/scripts/build_kratos"    \
    --applications ${app_names}                 \
    --source-dir "${kratos_source_dir}"         \
    --build-dir "${kratos_build_dir}"           \
    --install-dir "${kratos_install_dir}"       \
    --app-dirs "${local_app_dir}"               \
    --build-type "${build_type}"                \
    --compiler "${compiler_family}"             \
    ${compile_opts}                             \
    ${clean}                                    \
    --enable-profiling                          \
    ${mpi_flag}                                 \
    --install
